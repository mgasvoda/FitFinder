"""
Tests for the create_clothing_item tool - end-to-end functionality
Tests the complete workflow including the fix for dictionary unpacking
"""

import io
import base64
import pytest
from unittest.mock import patch, MagicMock, mock_open
from pathlib import Path
import numpy as np

from backend.agent.tools.create_clothing_item import create_clothing_item


@pytest.fixture
def fake_image_bytes():
    """1x1 pixel JPEG for testing"""
    return base64.b64decode(
        '/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0a'
        'HBwgJC4nICIsIxwcKDcpLTAxNDQ0Hyc5PTgyPC4zNDL/2wBDAQkJCQwLDBgNDRgyIRwhMjIyMjIy'
        'MjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjL/wAARCAABAAEDASIA'
        'AhEBAxEB/8QAFwAAAwEAAAAAAAAAAAAAAAAAAAUGB//EABYQAQEBAAAAAAAAAAAAAAAAAAABAv/EABUBAQEAAAAAAAAAAAAAAAAAAAID/8QAFBEBAAAAAAAAAAAAAAAAAAAAAP/aAAwDAQACEQMRAD8A9wD/AP/Z'
    )


def mock_caption_image_result():
    """Mock result from caption_image function"""
    return {
        "caption": "A stylish blue denim jacket with silver buttons",
        "category": "top", 
        "item_id": "test-item-123",
        "image_url": "/images/clothing_items/test-item-123.jpg",
        "metadata": {
            "filename": "test.jpg",
            "source_path": "/path/to/test.jpg"
        }
    }


def mock_embedding():
    """Mock embedding vector"""
    return np.array([0.1, 0.2, 0.3, 0.4, 0.5])


@patch("backend.agent.tools.create_clothing_item.persist_db_step")
@patch("backend.agent.tools.create_clothing_item.embed_step")
@patch("backend.agent.tools.create_clothing_item.caption_image")
def test_create_clothing_item_success_local_file(mock_caption, mock_embed, mock_persist, fake_image_bytes, tmp_path):
    """Test successful creation of clothing item from local file"""
    # Setup
    test_image_path = tmp_path / "test.jpg"
    test_image_path.write_bytes(fake_image_bytes)
    
    mock_caption.return_value = mock_caption_image_result()
    mock_embed.return_value = mock_embedding()
    mock_persist.return_value = "test-item-123"
    
    # Execute
    result = create_clothing_item(str(test_image_path))
    
    # Verify - UUID is generated by create_clothing_item, not from mock
    assert isinstance(result["item_id"], str)
    assert len(result["item_id"]) == 36  # UUID length
    assert result["caption"] == "A stylish blue denim jacket with silver buttons"
    assert result["category"] == "top"
    assert result["image_url"] == "/images/clothing_items/test-item-123.jpg"
    
    # Verify function calls
    mock_caption.assert_called_once()
    mock_embed.assert_called_once_with("A stylish blue denim jacket with silver buttons")
    mock_persist.assert_called_once()


@patch("backend.agent.tools.create_clothing_item.persist_db_step")
@patch("backend.agent.tools.create_clothing_item.embed_step")
@patch("backend.agent.tools.create_clothing_item.caption_image")
def test_create_clothing_item_success_url(mock_caption, mock_embed, mock_persist):
    """Test successful creation of clothing item from URL"""
    # Setup
    test_url = "https://example.com/test.jpg"
    
    mock_caption.return_value = mock_caption_image_result()
    mock_embed.return_value = mock_embedding()
    mock_persist.return_value = "test-item-123"
    
    # Execute
    result = create_clothing_item(test_url)
    
    # Verify - UUID is generated by create_clothing_item
    assert isinstance(result["item_id"], str)
    assert len(result["item_id"]) == 36  # UUID length
    assert result["caption"] == "A stylish blue denim jacket with silver buttons"
    assert result["category"] == "top"
    assert result["image_url"] == "/images/clothing_items/test-item-123.jpg"
    
    # Verify function calls
    mock_caption.assert_called_once_with(test_url, result["item_id"])
    mock_embed.assert_called_once_with("A stylish blue denim jacket with silver buttons")
    mock_persist.assert_called_once()


@patch("backend.agent.tools.create_clothing_item.persist_db_step")
@patch("backend.agent.tools.create_clothing_item.embed_step")
@patch("backend.agent.tools.create_clothing_item.caption_image")
def test_create_clothing_item_caption_error(mock_caption, mock_embed, mock_persist):
    """Test handling of caption_image errors"""
    # Setup - caption_image returns error
    mock_caption.return_value = {
        "caption": "Error processing image: File not found",
        "category": "Error: Could not parse category.",
        "item_id": "test-item-123",
        "image_url": None,
        "error": "File not found"
    }
    mock_embed.return_value = mock_embedding()
    mock_persist.return_value = "test-item-123"
    
    # Execute
    result = create_clothing_item("/nonexistent/path.jpg")
    
    # Verify error handling
    assert "Error processing image" in result["caption"]
    assert result["category"] == "Error: Could not parse category."
    assert result["image_url"] is None
    
    # Verify functions still called (error handled gracefully)
    mock_caption.assert_called_once()
    mock_embed.assert_called_once()
    mock_persist.assert_called_once()


@patch("backend.agent.tools.create_clothing_item.persist_db_step")
@patch("backend.agent.tools.create_clothing_item.embed_step")
@patch("backend.agent.tools.create_clothing_item.caption_image")
def test_create_clothing_item_embedding_error(mock_caption, mock_embed, mock_persist):
    """Test handling of embedding errors"""
    # Setup - embed_step returns None (error case)
    mock_caption.return_value = mock_caption_image_result()
    mock_embed.return_value = None  # Embedding failed
    mock_persist.return_value = "test-item-123"
    
    # Execute
    result = create_clothing_item("/path/to/test.jpg")
    
    # Verify result still returned despite embedding error
    assert isinstance(result["item_id"], str)
    assert len(result["item_id"]) == 36  # UUID length
    assert result["caption"] == "A stylish blue denim jacket with silver buttons"
    
    # Verify persist called with None embedding
    mock_persist.assert_called_once()
    args = mock_persist.call_args[0]
    assert args[2] is None  # embedding parameter


@patch("backend.agent.tools.create_clothing_item.persist_db_step")
@patch("backend.agent.tools.create_clothing_item.embed_step") 
@patch("backend.agent.tools.create_clothing_item.caption_image")
def test_create_clothing_item_persist_error(mock_caption, mock_embed, mock_persist):
    """Test handling of database persistence errors"""
    # Setup - persist_db_step returns None (error case)
    mock_caption.return_value = mock_caption_image_result()
    mock_embed.return_value = mock_embedding()
    mock_persist.return_value = None  # DB persistence failed
    
    # Execute
    result = create_clothing_item("/path/to/test.jpg")
    
    # Verify result still returned despite persistence error
    assert isinstance(result["item_id"], str)
    assert len(result["item_id"]) == 36  # UUID length
    assert result["caption"] == "A stylish blue denim jacket with silver buttons"
    
    # Verify all functions called
    mock_caption.assert_called_once()
    mock_embed.assert_called_once() 
    mock_persist.assert_called_once()


def test_create_clothing_item_uuid_generation():
    """Test that create_clothing_item generates valid UUID strings"""
    with patch("backend.agent.tools.create_clothing_item.caption_image") as mock_caption, \
         patch("backend.agent.tools.create_clothing_item.embed_step") as mock_embed, \
         patch("backend.agent.tools.create_clothing_item.persist_db_step") as mock_persist:
        
        mock_caption.return_value = mock_caption_image_result()
        mock_embed.return_value = mock_embedding()
        mock_persist.return_value = "test-item-123"
        
        result = create_clothing_item("/path/to/test.jpg")
        
        # Verify UUID is a string (our fix)
        assert isinstance(result["item_id"], str)
        assert len(result["item_id"]) == 36  # Standard UUID length
        assert "-" in result["item_id"]  # UUID format


@patch("backend.agent.tools.create_clothing_item.persist_db_step")
@patch("backend.agent.tools.create_clothing_item.embed_step")
@patch("backend.agent.tools.create_clothing_item.caption_image")
def test_create_clothing_item_uses_saved_image_url(mock_caption, mock_embed, mock_persist):
    """Test that create_clothing_item uses the saved image URL from caption_image, not the original"""
    # Setup - caption_image returns different URL than input
    original_url = "/path/to/original.jpg"
    saved_url = "/images/clothing_items/saved-123.jpg"
    
    caption_result = mock_caption_image_result()
    caption_result["image_url"] = saved_url
    mock_caption.return_value = caption_result
    mock_embed.return_value = mock_embedding()
    mock_persist.return_value = "test-item-123"
    
    # Execute
    result = create_clothing_item(original_url)
    
    # Verify saved URL is used in result and persist call
    assert result["image_url"] == saved_url
    
    # Verify persist_db_step called with saved URL, not original
    persist_args = mock_persist.call_args[0]
    assert persist_args[1] == saved_url  # image_url parameter 